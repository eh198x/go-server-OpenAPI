/*
 * PetSitter API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 0.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"net/http/httputil"
	"strings"

	//swagger "github.com/ehadjikyriacou/go-server-OpenAPI/go"
	"go.mongodb.org/mongo-driver/bson"
	//cmd "github.com/ehadjikyriacou/go-server-OpenAPI/cmd"
)

func JobApplicationsIdPut(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func JobsGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func JobsIdDelete(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func JobsIdGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func JobsIdJobApplicationsGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func JobsIdJobApplicationsPost(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func JobsIdPut(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func JobsPost(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func UsersIdDelete(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func UsersIdGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func UsersIdJobApplicationsGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func UsersIdJobsGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func UsersIdPut(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	//id := r.URL.Query().Get("id")

	id := strings.TrimPrefix(r.URL.Path, "/users/")

	fmt.Printf("id=%v\n\n", id)

	var user User
	err := json.NewDecoder(r.Body).Decode(&user)
	if err != nil {
		fmt.Printf("err=%s\n\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	UpdateUserDataSimple(id, user)
	/*
		reqDump, err := httputil.DumpRequest(r, true)
		if err != nil {
			log.Fatal(err)
		}

		fmt.Printf("REQUEST:\n%s\n", string(reqDump))
	*/
	w.WriteHeader(http.StatusOK)
}

func UsersPost(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	reqDump, err := httputil.DumpRequest(r, true)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("REQUEST:\n%s\n", string(reqDump))

	var user User
	err = json.NewDecoder(r.Body).Decode(&user)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	fmt.Printf("\n\n\n")
	fmt.Printf("FullName:%s, Roles:%s, Email:%s\n", user.FullName, user.Roles, user.Email)

	// HERE ITS REQUIRED TO CONVERT struct USER to Interface

	data := []interface{}{
		bson.D{{Key: "Email", Value: user.Email}, {Key: "Password", Value: "hokuto1h"}, {Key: "FullName", Value: user.Email}},
		//		bson.D{{Key: "Email", Value: "a@e.cy"}, {Key: "Password", Value: "hokuto2h"}, {Key: "FullName", Value: "KENS B"}},
		//		bson.D{{Key: "Email", Value: "b@e.cy"}, {Key: "Password", Value: "hokutoh3"}, {Key: "FullName", Value: "KENS C"}},
	}

	err = InsertDataSimple(data)
	if err != nil {
		panic(err)
	}
	err = ViewInsertedDataSimple()
	if err != nil {
		panic(err)
	}
	w.WriteHeader(http.StatusOK)
}
